/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./script.js":
/*!*******************!*\
  !*** ./script.js ***!
  \*******************/
/***/ (() => {

eval("const socket = new WebSocket(\"ws://localhost:8081/ws\");\r\nconsole.log(\"After WebSocket connection\");\r\n\r\nsocket.addEventListener(\"error\", (event) => {\r\n    console.log(\"WebSocket error: \", event);\r\n  });\r\n// Event handler when the WebSocket connection is opened.\r\nsocket.onopen = () => {\r\n    console.log(\"WebSocket connection opened\");\r\n};\r\nvar solidIndexes\r\nvar currClientInfo\r\nvar competitors\r\nvar bulletCount = 0;\r\nvar clientCooldownTime = 200\r\nvar bulletCooldownTime = clientCooldownTime * 6\r\nvar cellWidth = 30\r\nsocket.onmessage = (event) => {\r\n    const message = JSON.parse(event.data)\r\n    console.log('message: ', message)\r\n    const messageType = message.type\r\n    if(messageType === \"updateStatus\") {\r\n        console.log('updateStatus')\r\n        const statusContent = message.statusContent\r\n        displayStatusMessage(statusContent) \r\n        \r\n    }  else {\r\n    const clientInfo = message.clientInfo\r\n    const ID = clientInfo.ID\r\n    const currentPosition= clientInfo.Position\r\n    console.log('id', ID)\r\n    console.log(messageType, clientInfo.ID, currentPosition, ID, currentPosition)\r\n    \r\n    if(messageType === \"assignPositionForNewClient\") {\r\n        const matrix = message.matrix.matrix;\r\n        const bullets = message.bullets\r\n        solidIndexes = new Set(matrix)\r\n        currClientInfo = clientInfo\r\n        competitors = message.competitors\r\n\r\n        createMaze();\r\n        updateScoreTable();\r\n        createUser(ID, currentPosition, clientInfo.Direction);\r\n        // console.log('first message')\r\n        for (const competitor of Object.values(competitors)) {\r\n            // console.log('competitor', competitor)\r\n            createUser(competitor.ID, competitor.Position, competitor.Direction);\r\n        }\r\n        if (bullets && bullets.length) {\r\n            for (let i = 0; i < bullets.length; i++) {\r\n                createNewBullet(bullets[i]);\r\n            }\r\n        } else {\r\n            console.error('Bullets array is null or empty.');\r\n        }\r\n        \r\n    }\r\n    if(messageType === \"hasNewClient\") {\r\n        console.log('hasNewClient')\r\n        createUser(ID, currentPosition, clientInfo.Direction);\r\n        insertScoreTable(clientInfo)\r\n        competitors[clientInfo.ID]= clientInfo;\r\n    }    \r\n    if(messageType === \"removeOneClient\") {\r\n        console.log('removeOneClient')\r\n        removeOneClient(ID);\r\n        deleteRowInScoreTable(clientInfo); \r\n    }   \r\n    //\r\n    if(messageType === \"moveOneClient\") {\r\n        console.log('moveOneClient')\r\n        moveOneClient(clientInfo)\r\n        competitors[clientInfo.ID].Position=clientInfo.Position\r\n        competitors[clientInfo.ID].Direction=clientInfo.Direction\r\n        \r\n    }  \r\n    if(messageType === \"hasNewBullet\") {\r\n        console.log('hasNewBullet')\r\n        const bulletInfo = message.bulletInfo;\r\n        if(currClientInfo.ID === clientInfo.ID) {\r\n            // currClientInfo.BulletCooldown = clientInfo.BulletCooldown\r\n        }\r\n        createNewBullet(bulletInfo)\r\n        \r\n    }  \r\n    if(messageType === \"removeOneBullet\") {\r\n        console.log('removeOneBullet')\r\n        const bulletInfo = message.bulletInfo;\r\n        removeOneBullet(bulletInfo.ID)\r\n    }  \r\n    if(messageType === \"moveOneBullet\") {\r\n        console.log('moveOneBullet')\r\n        const bulletInfo = message.bulletInfo;\r\n        if(currClientInfo.ID === clientInfo.ID) {\r\n            //  currClientInfo.BulletCooldown = clientInfo.BulletCooldown\r\n        }\r\n        moveOneBullet(bulletInfo)\r\n    }  \r\n    if(messageType === \"updateScoreOfOneClient\") {\r\n        console.log('updateScoreOfOneClient')\r\n\r\n        updateRowInScoreTable(clientInfo)\r\n        competitors[clientInfo.ID]= clientInfo;\r\n        if (clientInfo.ID == currClientInfo.ID) {\r\n            currClientInfo.Score = clientInfo.Score\r\n        }\r\n    }  \r\n    \r\n    }\r\n    \r\n  \r\n    //return false;  \r\n\r\n}\r\nsocket.onclose = (event) => {\r\n    console.log('WebSocket connection closed:', event.code, event.reason);\r\n  };\r\n// socket.onclose = (event) => {\r\n  \r\n//     // if(event.wasClean) {\r\n//     //     console.log(`Closed cleanly, code = ${event.code}, reason = ${event.reason}`);\r\n\r\n//     // }else {\r\n//     //     console.log(\"Connection died\");\r\n\r\n//     // }\r\n// }\r\n\r\nsocket.onerror = (event) => {\r\n    console.log(`WebSocket connection error: ${event}`);\r\n\r\n}\r\n\r\n\r\nfunction createMaze() {\r\n \r\n    const mazeContainer = document.getElementById(\"maze\");\r\n\r\n    for (let i = 0; i < 32 * 16; i++) {\r\n        const cell = document.createElement(\"div\");\r\n        cell.classList.add(\"cell\");\r\n        const _solidIndexes = solidIndexes;\r\n\r\n        if (_solidIndexes.has(i)) {\r\n            cell.classList.add(\"solid\");\r\n        }\r\n\r\n\r\n        mazeContainer.appendChild(cell);\r\n    }\r\n}\r\nfunction createUser(ID, position, direction) {\r\n    const userId = \"user_\" + ID;\r\n    const oldUser = document.getElementById(userId)\r\n    if (oldUser) {\r\n        oldUser.remove()\r\n    }\r\n    var _user = document.createElement(\"div\");\r\n    _user.classList.add(\"user\");\r\n    _user.classList.add(direction)\r\n    _user.id = userId\r\n\r\n    const mazeContainer = document.getElementById(\"maze-container\");\r\n    mazeContainer.appendChild(_user);\r\n\r\n    const x = Math.floor(position % 32);\r\n    const y = Math.floor(position / 32);\r\n    console.log('type of x', typeof(x))\r\n\r\n    _user.style.position = \"absolute\";\r\n    _user.style.left = (cellWidth * x) + \"px\";\r\n    _user.style.top = (cellWidth * y) + \"px\";\r\n\r\n}\r\nfunction createNewBullet(bulletInfo) {\r\n\r\n    const bulletId = bulletInfo.ID;\r\n    const position = bulletInfo.Position;\r\n    const direction = bulletInfo.Direction;\r\n    const oldBullet = document.getElementById(bulletId)\r\n    if (oldBullet) {\r\n        oldBullet.remove()\r\n    }\r\n    var _bullet = document.createElement(\"div\");\r\n    _bullet.classList.add(\"bullet\");\r\n    _bullet.classList.add(direction)\r\n    _bullet.id = \"bullet_\" + bulletId\r\n\r\n    const mazeContainer = document.getElementById(\"maze-container\");\r\n    mazeContainer.appendChild(_bullet);\r\n\r\n    const x = Math.floor(position % 32);\r\n    const y = Math.floor(position / 32);\r\n    console.log('type of x', x, y)\r\n\r\n    _bullet.style.position = \"absolute\";\r\n    _bullet.style.left = (cellWidth * x) + \"px\";\r\n    _bullet.style.top = (cellWidth * y) + \"px\";\r\n\r\n}\r\nfunction updateScoreTable() {\r\n    const tableBody = document.querySelector('#scoreTable tbody');\r\n    tableBody.innerHTML = ''; // Clear existing rows\r\n\r\n    // Iterate over the values of the competitors object\r\n    for (const competitor of Object.values(competitors)) {\r\n        const rowId = \"rowScore_\" + competitor.ID\r\n        const row = document.createElement('tr');\r\n        row.id= rowId;\r\n        row.innerHTML = `\r\n            <td>${competitor.ID}</td>\r\n            <td>${competitor.Score}</td>\r\n            <td>${competitor.Position}</td>\r\n            <td>${competitor.Direction}</td>\r\n        `;\r\n        tableBody.appendChild(row);\r\n    }\r\n}\r\nfunction insertScoreTable(clientInfo) {\r\n    const tableBody = document.querySelector('#scoreTable tbody');\r\n    //tableBody.innerHTML = ''; // Clear existing rows\r\n    const row = document.createElement('tr');\r\n    const rowId = \"rowScore_\" + clientInfo.ID\r\n    row.id = rowId;\r\n    row.innerHTML = `\r\n        <td>${clientInfo.ID}</td>\r\n        <td>${clientInfo.Score}</td>\r\n        <td>${clientInfo.Position}</td>\r\n        <td>${clientInfo.Direction}</td>\r\n    `;\r\n    tableBody.appendChild(row);\r\n}\r\nfunction updateRowInScoreTable(clientInfo) {\r\n    const rowId = \"rowScore_\" + clientInfo.ID\r\n    const row = document.getElementById(rowId);\r\n    if (row) {\r\n        // Update the content of the existing row\r\n        row.innerHTML = `\r\n            <td>${clientInfo.ID}</td>\r\n            <td>${clientInfo.Score}</td>\r\n            <td>${clientInfo.Position}</td>\r\n            <td>${clientInfo.Direction}</td>\r\n        `;\r\n    } else {\r\n        // Row doesn't exist, create a new row\r\n        const tableBody = document.querySelector('#scoreTable tbody');\r\n        const newRow = document.createElement('tr');\r\n        newRow.id = rowId;\r\n        newRow.innerHTML = `\r\n            <td>${clientInfo.ID}</td>\r\n            <td>${clientInfo.Score}</td>\r\n            <td>${clientInfo.Position}</td>\r\n            <td>${clientInfo.Direction}</td>\r\n        `;\r\n        tableBody.appendChild(newRow);\r\n    }\r\n}\r\nfunction deleteRowInScoreTable(clientInfo) {\r\n    const rowId = \"rowScore_\" + clientInfo.ID\r\n    const row = document.getElementById(rowId);\r\n    if(row){\r\n        row.remove();\r\n    }\r\n   \r\n}\r\nfunction displayStatusMessage(message) {\r\n    // Create a new <p> element\r\n    var pElement = document.createElement(\"p\");\r\n    pElement.textContent = message;\r\n\r\n    // Get the status div\r\n    var statusDiv = document.getElementById(\"status\");\r\n\r\n    // Append the <p> element to the status div\r\n    statusDiv.appendChild(pElement);\r\n\r\n    // Scroll to the bottom to show the latest message\r\n    statusDiv.scrollTop = statusDiv.scrollHeight;\r\n}\r\nfunction removeOneClient(ID) {\r\n\r\n    const userId = \"user_\" + ID;\r\n    const user = document.getElementById(userId);\r\n\r\n    if (user) {\r\n        console.log('remove one client')\r\n        user.remove();\r\n    } else {\r\n        console.error(`Element with ID ${userId} not found.`);\r\n    }\r\n}\r\nfunction removeOneBullet(ID) {\r\n    const bulletId = \"bullet_\" + ID;\r\n    const bullet = document.getElementById(bulletId);\r\n\r\n    if (bullet) {\r\n        console.log('remove one bullet')\r\n        bullet.remove();\r\n    } else {\r\n        console.error(`Element with ID ${bulletId} not found.`);\r\n    }\r\n}\r\nfunction moveOneClient(clientInfo){\r\n    const userId = \"user_\" + clientInfo.ID;\r\n    const _user = document.getElementById(userId)\r\n    if (_user) {\r\n        const position = clientInfo.Position;\r\n        const x = Math.floor(position % 32);\r\n        const y = Math.floor(position / 32);\r\n        console.log('type of x', typeof(x))\r\n\r\n        _user.style.position = \"absolute\";\r\n        _user.style.left = (cellWidth * x) + \"px\";\r\n        _user.style.top = (cellWidth * y) + \"px\";\r\n        if(_user.classList.contains(\"Left\")){\r\n            _user.classList.remove(\"Left\");\r\n        }\r\n        if(_user.classList.contains(\"Right\")){\r\n            _user.classList.remove(\"Right\");\r\n        }\r\n        if(_user.classList.contains(\"Up\")){\r\n            _user.classList.remove(\"Up\");\r\n        }\r\n        if(_user.classList.contains(\"Down\")){\r\n            _user.classList.remove(\"Down\");\r\n        }\r\n        _user.classList.add(clientInfo.Direction)\r\n    }\r\n}\r\nfunction moveOneBullet(bulletInfo){\r\n    const bulletId = \"bullet_\" + bulletInfo.ID;\r\n    const _bullet = document.getElementById(bulletId)\r\n    console.log('bulletId', bulletId)\r\n    if (_bullet) {\r\n        const position = bulletInfo.Position;\r\n        const x = Math.floor(position % 32);\r\n        const y = Math.floor(position / 32);\r\n        console.log('type of x', typeof(x))\r\n\r\n        _bullet.style.position = \"absolute\";\r\n        _bullet.style.left = (cellWidth * x) + \"px\";\r\n        _bullet.style.top = (cellWidth * y) + \"px\";\r\n        // if(_bullet.classList.contains(\"Left\")){\r\n        //     _bullet.classList.remove(\"Left\");\r\n        // }\r\n        // if(_bullet.classList.contains(\"Right\")){\r\n        //     _bullet.classList.remove(\"Right\");\r\n        // }\r\n        // if(_bullet.classList.contains(\"Up\")){\r\n        //     _bullet.classList.remove(\"Up\");\r\n        // }\r\n        // if(_bullet.classList.contains(\"Down\")){\r\n        //     _bullet.classList.remove(\"Down\");\r\n        // }\r\n        //_bullet.classList.add(bulletInfo.Direction)\r\n    }\r\n}\r\ndocument.addEventListener(\"DOMContentLoaded\", function() {\r\n    let shootingInProgress = false;\r\n    let movingInProgress = false;\r\n    // Event listener for arrow key presses\r\n    document.addEventListener(\"keydown\", event => {\r\n        const step = cellWidth;\r\n        const currentPosition = currClientInfo.Position\r\n        const direction = event.key.slice(5,event.key.length)\r\n        var keyType;\r\n        if(!isPositionOccupiedByCompetitor(determineNewPositionByDirection(currentPosition, direction))\r\n        && !isPositionOccupiedByWall(currentPosition, direction)\r\n        && !shootingInProgress \r\n         && !movingInProgress\r\n        ) {\r\n            movingInProgress = true;\r\n            const oldDirection = currClientInfo.Direction;\r\n            switch (event.key) {\r\n            \r\n                case \"ArrowLeft\":\r\n                    moveLeft(step, oldDirection);\r\n                    keyType =\"Move\"\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    moveRight(step, oldDirection);\r\n                    keyType =\"Move\"\r\n                    break;\r\n                case \"ArrowUp\":\r\n                    moveUp(step, oldDirection);\r\n                    keyType =\"Move\"\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    moveDown(step, oldDirection);\r\n                    keyType =\"Move\"\r\n                    break;\r\n                case \"Q\" || 0:\r\n                    console.log('quit')\r\n                    // Handle Q key\r\n                    keyType = \"Quit\";\r\n                    break;   \r\n                default:\r\n                // Handle Q key\r\n                    console.log('Cannot recognize action')\r\n                    break;    \r\n            }\r\n            if (keyType==\"Move\"){\r\n                currClientInfo.Position = determineNewPositionByDirection(currentPosition, direction); \r\n                currClientInfo.Direction = direction;\r\n                const message = {\r\n                    type: \"clientRequestMoving\",\r\n                    clientInfo: currClientInfo\r\n                }\r\n                while (true){\r\n                    if(!shootingInProgress) {\r\n                        \r\n                        const operationTimeout = setTimeout(() => {\r\n                            movingInProgress = false\r\n                            console.log(\"Timeout exceed in Moving\")\r\n                        }, clientCooldownTime);\r\n                        socket.send(JSON.stringify(message));\r\n                        break;\r\n                    }\r\n                 \r\n                }\r\n               \r\n            }\r\n           \r\n          \r\n           \r\n        }\r\n       \r\n        event.preventDefault();\r\n     \r\n    });\r\n    \r\n    document.addEventListener('keyup', event => {\r\n        if (event.code === 'Space') {\r\n        //shootingInProgress = false;\r\n            console.log('Space pressed')\r\n            console.log('shoot')\r\n            console.log('bullet cooldown', currClientInfo.BulletCooldown);\r\n            if (!shootingInProgress && isAllowedToShoot(currClientInfo)) {\r\n                shootingInProgress = true;\r\n                console.log('is allowed to shoot')\r\n                const bulletId =  bulletCount + currClientInfo.ID*100;\r\n                const bulletDirection = currClientInfo.Direction \r\n                const bulletPosition = determineNewPositionByDirection(currClientInfo.Position, bulletDirection)\r\n                console.log('bullet info', bulletDirection); //bulletPosition\r\n                console.log('bullet info', bulletPosition); //\r\n                const bulletInfo = {\r\n                    ID: bulletId,\r\n                    ClientID: currClientInfo.ID,\r\n                    Position: bulletPosition,\r\n                    Direction: bulletDirection\r\n                }\r\n                //createNewBullet(bulletInfo)\r\n                const clientRequestShootingMessage = {\r\n                    type: \"clientRequestShooting\",\r\n                    clientInfo: currClientInfo,\r\n                    bulletInfo: bulletInfo\r\n                }\r\n                \r\n                socket.send(JSON.stringify(clientRequestShootingMessage));\r\n                //currClientInfo.BulletCooldown = 4;\r\n\r\n                const operationTimeout = setTimeout(() => {\r\n                console.log(\"Timeout exceeded. Operation aborted.\");\r\n                shootingInProgress = false;\r\n                currClientInfo.BulletCooldown = 0;\r\n                }, bulletCooldownTime);\r\n                \r\n                // Simulate the operation (replace with your actual code)\r\n                // Clear the timeout to prevent it from triggering\r\n\r\n                bulletCount++;\r\n            \r\n        \r\n            } else {\r\n                console.log('Cannot shoot. Cooldown in progress.');\r\n            }\r\n\r\n\r\n\r\n        }\r\n        if (event.code===\"Q\"){\r\n            console.log('want to quiet')\r\n            const message = {\r\n                type: \"clientRequestLoggingOut\",\r\n                clientInfo: currClientInfo\r\n            }\r\n            socket.send(JSON.stringify(message));\r\n        }\r\n\r\n      })\r\n    \r\n});\r\n\r\nfunction isAllowedToShoot (clientInfo){\r\n    const position = clientInfo.Position\r\n    const direction = clientInfo.Direction\r\n    const bulletCooldown = clientInfo.BulletCooldown\r\n    if (!isPositionOccupiedByCompetitor(position) \r\n    && !isPositionOccupiedByWall(position, direction)\r\n    && bulletCooldown == 0\r\n    ){\r\n        return true;\r\n    }\r\n    return false\r\n}\r\nfunction determineNewPositionByDirection(currPosition, direction){\r\n    var newPosition\r\n    switch(direction){\r\n        case \"Up\":\r\n            newPosition = currPosition - 32;\r\n            break;\r\n        case \"Down\":\r\n            newPosition = currPosition + 32\r\n            break;\r\n        case \"Left\":\r\n            newPosition = currPosition - 1\r\n            break;\r\n        case \"Right\":\r\n            newPosition = currPosition + 1\r\n            break;\r\n    }\r\n    return newPosition;\r\n}\r\nfunction isPositionOccupiedByCompetitor(position) {\r\n    for (let i = 0; i < competitors.length; i++) {\r\n      if (competitors[i].Position === position) {\r\n        console.log('competitor position', competitors[i].Position);\r\n        return true; // Position is occupied\r\n      }\r\n    }\r\n    return false; // Position is not occupied\r\n}\r\nfunction isPositionOccupiedByWall(currPosition, direction) {\r\n\r\n    const newPosition = determineNewPositionByDirection(currPosition, direction) \r\n    switch(direction){\r\n        case \"Up\":\r\n            if(newPosition >=0 && !solidIndexes.has(newPosition)){\r\n                return false;\r\n            }\r\n            break;\r\n        case \"Down\":\r\n            if(newPosition < 32*16 && !solidIndexes.has(newPosition)){\r\n                return false;\r\n            }\r\n            break;\r\n        case \"Left\":\r\n            if(currPosition % 32!==0 && !solidIndexes.has(newPosition)){\r\n                return false;\r\n            }\r\n            break;\r\n          \r\n        case \"Right\":\r\n            if(currPosition % 32!==31 && !solidIndexes.has(newPosition)){\r\n                return false;\r\n            }\r\n            break;\r\n    }\r\n\r\n    return true;\r\n}\r\nfunction moveLeft(step, oldDirection) {\r\n   \r\n    const userId = \"user_\" + currClientInfo.ID;\r\n    const user = document.getElementById(userId);\r\n    const currentPosition = parseInt(user.style.left) || 0;\r\n    user.style.left = currentPosition - step + \"px\";\r\n    user.classList.remove(oldDirection);\r\n    user.classList.add(\"Left\")\r\n}\r\n\r\nfunction moveRight(step, oldDirection) {\r\n    const userId = \"user_\" + currClientInfo.ID;\r\n    const user = document.getElementById(userId);\r\n    const currentPosition = parseInt(user.style.left) || 0;\r\n    user.style.left = currentPosition + step + \"px\";\r\n    user.classList.remove(oldDirection);\r\n    user.classList.add(\"Right\")\r\n}\r\n\r\nfunction moveUp(step, oldDirection) {\r\n    const userId = \"user_\" + currClientInfo.ID;\r\n    const user = document.getElementById(userId);\r\n    const currentPosition = parseInt(user.style.top) || 0;\r\n    user.style.top = currentPosition - step + \"px\";\r\n    user.classList.remove(oldDirection);\r\n    user.classList.add(\"Up\")\r\n    \r\n}\r\n\r\nfunction moveDown(step, oldDirection) {\r\n    const userId = \"user_\" + currClientInfo.ID;\r\n    const user = document.getElementById(userId);\r\n    const currentPosition = parseInt(user.style.top) || 0;\r\n    user.style.top = currentPosition + step + \"px\";\r\n    user.classList.remove(oldDirection);\r\n    user.classList.add(\"Down\")\r\n}\n\n//# sourceURL=webpack://frontend/./script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./script.js"]();
/******/ 	
/******/ })()
;